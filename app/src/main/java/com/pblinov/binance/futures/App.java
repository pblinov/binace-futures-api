/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.pblinov.binance.futures;

import com.pblinov.binance.futures.api.BinanceExchange;
import com.pblinov.binance.futures.api.Exchange;
import com.pblinov.binance.futures.api.dto.OrderType;
import com.pblinov.binance.futures.api.dto.OrderUpdateEvent;
import com.pblinov.binance.futures.api.dto.Side;
import com.pblinov.binance.futures.api.dto.TimeInForce;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.time.Duration;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

@Slf4j
public class App {

    public static final String SYMBOL = "BTCUSDT";

    public static void main(String[] args) throws Exception {
        log.info("Start");

        var exchange = new BinanceExchange("https://testnet.binancefuture.com",
                "wss://stream.binancefuture.com",
                "2001bb6af62d27c7993730801dd9dab763bd6f6c4e1a736331861b7c30b8e950",
                "802990f5ee6ffa2491f8dabf2c3fcf10edae15a71eaaa74b482586d26ef87890",
                App::onOrderUpdate);

        exchange.start();
        if (exchange.ping()) {
            log.info("REST API is available");
            exchange.connect();
            onExchangeConnect(exchange);

            Thread.sleep(Duration.ofMinutes(10).toMillis());

            exchange.stop();
        }
        log.info("Stop");
    }

    private static void onExchangeConnect(Exchange exchange) throws IOException, ExecutionException, InterruptedException, TimeoutException, NoSuchAlgorithmException, InvalidKeyException {
        log.info("Time difference: {}ms", System.currentTimeMillis() - exchange.timestamp());
        exchange.placeOrder(SYMBOL, OrderType.LIMIT, Side.SELL, 0.01, 28700.0, TimeInForce.GTC);
    }

    @SneakyThrows
    private static void onOrderUpdate(Exchange exchange, OrderUpdateEvent orderUpdate) {
        log.info("On order update: {}", orderUpdate);
        exchange.queryOrder(SYMBOL, orderUpdate.getPayload().getClientOrderId());
        exchange.cancelOrder();
    }
}

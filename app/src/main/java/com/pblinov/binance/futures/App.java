/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.pblinov.binance.futures;

import com.pblinov.binance.futures.api.BinanceConfig;
import com.pblinov.binance.futures.api.BinanceExchange;
import com.pblinov.binance.futures.api.Exchange;
import com.pblinov.binance.futures.api.dto.ExecutionType;
import com.pblinov.binance.futures.api.dto.OrderUpdateEvent;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import java.time.Duration;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import static com.pblinov.binance.futures.api.dto.OrderType.LIMIT;
import static com.pblinov.binance.futures.api.dto.Side.SELL;
import static com.pblinov.binance.futures.api.dto.TimeInForce.GTC;

@Slf4j
public class App {

    public static final String SYMBOL = "BTCUSDT";
    private static final CountDownLatch latch = new CountDownLatch(1);

    public static void main(String[] args) throws Exception {
        log.info("Start");

        var exchange = new BinanceExchange(BinanceConfig.builder()
                .exchangeName("Binance Futures")
                .httpUrl("https://testnet.binancefuture.com")
                .wsUrl("wss://stream.binancefuture.com")
                .apiKey("2001bb6af62d27c7993730801dd9dab763bd6f6c4e1a736331861b7c30b8e950")
                .apiSecret("802990f5ee6ffa2491f8dabf2c3fcf10edae15a71eaaa74b482586d26ef87890")
                .build(),
                App::onOrderUpdate);

        exchange.start();
        if (exchange.ping()) {
            log.info("REST API is available");
            exchange.connect();
            log.info("Time difference: {}ms", System.currentTimeMillis() - ((Exchange) exchange).timestamp());
            var orderId = Long.toString(System.currentTimeMillis());
            exchange.placeOrder(SYMBOL, orderId, LIMIT, SELL, 0.01, 28700.0, GTC);
            log.info("Order: {}", exchange.queryOrder(SYMBOL, orderId));
            exchange.cancelOrder(SYMBOL, orderId);

            if (!latch.await(Duration.ofSeconds(10).toMillis(), TimeUnit.MILLISECONDS)) {
                log.error("Orders hasn't cancelled in timeout");
            }

            exchange.stop();
        } else {
            log.error("Exchange is unavailable");
        }
        log.info("Stop");
    }

    @SneakyThrows
    private static void onOrderUpdate(OrderUpdateEvent orderUpdate) {
        var payload = orderUpdate.getPayload();
        log.info("Order with ID={} has status {}({})", payload.getClientOrderId(), payload.getOrderStatus(), payload.getExecutionType());
        if (payload.getExecutionType() == ExecutionType.CANCELED) {
            latch.countDown();
        }
    }
}
